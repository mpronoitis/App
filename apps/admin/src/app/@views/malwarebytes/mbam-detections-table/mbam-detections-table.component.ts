import { Component, OnInit, ViewChild } from '@angular/core';
import { Store } from '@ngxs/store';
import { ToastrService } from 'ngx-toastr';
import { MbamOneViewDetection } from '@play.app/types/Mbam/MbamOneViewDetection';
import { GetMbamAllDetections } from '../../../@store/Actions/mbam.action';
import { MatTableDataSource } from '@angular/material/table';
import { faSync } from '@fortawesome/free-solid-svg-icons';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'play-app-mbam-detections-table',
  templateUrl: './mbam-detections-table.component.html',
  styleUrls: ['./mbam-detections-table.component.scss'],
})
export class MbamDetectionsTableComponent implements OnInit {
  detections: MbamOneViewDetection[] = [];
  loading = false;

  //table vars
  displayedColumns: string[] = ['User', 'Threat', 'Path', 'Type', 'Date'];
  dataSource!: MatTableDataSource<MbamOneViewDetection>;
  @ViewChild(MatPaginator) paginator: MatPaginator | null = null;
  @ViewChild(MatSort) sort: MatSort | null = null;

  //icons
  faSync = faSync;

  //eslint-disable-next-line @typescript-eslint/no-empty-function
  constructor(private store: Store, private toastr: ToastrService) {}

  ngOnInit(): void {
    this.getDetections();
  }

  /**
   * @summary Function to fetch the detections from the store
   */
  getDetections(): void {
    this.loading = true;
    const sub = this.store.dispatch(new GetMbamAllDetections()).subscribe(
      (res) => {
        this.detections = res.mbam.detections;
        setTimeout(
          () => (this.dataSource = new MatTableDataSource(this.detections))
        );
        setTimeout(() => (this.dataSource.paginator = this.paginator));
        setTimeout(() => (this.dataSource.sort = this.sort));
        this.loading = false;
        sub.unsubscribe();
        this.toastr.success(
          'Fetched ' + this.detections.length + ' detections'
        );
      },
      (err) => {
        this.loading = false;
        this.toastr.error(err.message);
        sub.unsubscribe();
      }
    );
  }

  /**
   * @summary Filter table
   */
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();

    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }
}
